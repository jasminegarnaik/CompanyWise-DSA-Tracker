## Approach
Key Idea:
→ Minimum insertions = length - Longest Palindromic Subsequence (LPS).
Trick:
→ LPS = LCS of the string and its reverse.
Solution:
1.Reverse the string.
2.Use tabulation (bottom-up DP) to compute LCS.
3.Subtract LCS length from original string length.

## JAVA Code
class Solution {
    static int lcs(String s,String t){
        int n=s.length();
        int m=t.length();
        int[][] dp=new int[n+1][m+1];
      for(int[] row:dp){
        Arrays.fill(row,-1);
      }
        for(int i=0;i<=n;i++){
            dp[i][0]=0;
        }
        for(int j=0;j<=m;j++){
            dp[0][j]=0;
        }
    for(int idx1=1;idx1<=n;idx1++){
       for(int idx2=1;idx2<=m;idx2++){
        if(s.charAt(idx1-1)==t.charAt(idx2-1)){
            dp[idx1][idx2]=1+dp[idx1-1][idx2-1];
        }
        else dp[idx1][idx2]=Math.max(dp[idx1-1][idx2],dp[idx1][idx2-1]);
    } 
    }
    return dp[n][m];
    }
    static int helper(String s){
        String reversed=new StringBuilder(s).reverse().toString();
        return lcs(s,reversed);
    }
    public int minInsertions(String s) {
        return s.length()-helper(s);
    }
}
